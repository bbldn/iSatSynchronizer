# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    front.database_name: '%env(DATABASE_FRONT_NAME)%'
    front.site_path: '%env(FRONT_SITE_PATH)%'
    front.site_url: '%env(FRONT_SITE_URL)%'
    back.site_path: '%env(BACK_SITE_PATH)%'
    back.site_url: '%env(BACK_SITE_URL)%'
    back.database_name: '%env(DATABASE_BACK_NAME)%'
    database_name: '%env(DATABASE_NAME)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $productImageBackPath: '%env(json:PRODUCT_IMAGE_BACK_PATH)%'
            $productImageFrontPath: '%env(string:PRODUCT_IMAGE_FRONT_PATH)%'
            $categoryImageBackPath: '%env(string:CATEGORY_IMAGE_BACK_PATH)%'
            $categoryImageFrontPath: '%env(string:CATEGORY_IMAGE_FRONT_PATH)%'
            $seoProEnabled: '%env(bool:SEO_PRO_ENABLED)%'
            $handlerPort: '%env(int:HANDLER_PORT)%'
            $consolePath: '%env(string:CONSOLE_PORT)%'
            $novaposhtaApiKey: '%env(string:NOVAPOSHTA_API_KEY)%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\API\ProductController:
        class: App\Controller\API\ProductController
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']


    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Service\FrontBackFileSystem\GetBackFileInterface:
        factory:   ['@App\Service\FrontBackFileSystem\FrontBackFileSystemFactory', createGetBackFileInstance]
        arguments:
        - '@Symfony\Component\Filesystem\Filesystem'
        - '@Symfony\Contracts\HttpClient\HttpClientInterface'
        - '%env(BACK_READER)%'

    App\Service\FrontBackFileSystem\SaveFrontFileInterface:
        factory:   ['@App\Service\FrontBackFileSystem\FrontBackFileSystemFactory', createSaveFrontFileInstance]
        arguments:
        - '@Symfony\Component\Filesystem\Filesystem'
        - '@Symfony\Contracts\HttpClient\HttpClientInterface'
        - '@App\Helper\Front\Store'
        - '%env(string:FRONT_SITE_TOKEN)%'
        - '%env(string:FRONT_WRITER)%'

    App\EventListener\OnConnect:
        tags:
        - { name: doctrine.event_listener, event: postConnect }

    App\Repository\Front\ProductRepository:
        arguments:
        - '@Doctrine\Common\Persistence\ManagerRegistry'
        - '@App\Repository\ProductRepository'
        - '%database_name%'
        - '%front.database_name%'

    App\Command\DebugServerCommand:
        arguments:
        - '8088'

    LisDev\Delivery\NovaPoshtaApi2:
        arguments:
        - '%env(string:NOVAPOSHTA_API_KEY)%'
        - 'ru'
        - false
        - 'curl'