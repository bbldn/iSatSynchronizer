# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    front.available_status_id: '%env(FRONT_AVAILABLE_STATUS_ID)%'
    front.not_available_status_id: '%env(FRONT_NOT_AVAILABLE_STATUSID)%'
    front.default_language_id: '%env(FRONT_DEFAULT_LANGUAGE_ID)%'
    front.default_store_id: '%env(FRONT_DEFAULT_STORE_ID)%'
    front.default_layout_id: '%env(FRONT_DEFAULT_LAYOUT_ID)%'
    front.default_category_front_id: '%env(FRONT_DEFAULT_CATEGORY_FRONT_ID)%'
    front.default_sort_order: '%env(FRONT_DEFAULT_SORT_ORDER)%'
    front.default_attribute_group_id: '%env(FRONT_DEFAULT_ATTRIBUTE_GROUP_ID)%'
    front.root_categories: '%env(json:FRONT_ROOT_CATEGORIES)%'
    front.site_path: '%env(FRONT_SITE_PATH)%'
    front.site_url: '%env(FRONT_SITE_URL)%'
    back.site_path: '%env(BACK_SITE_PATH)%'
    back.site_url: '%env(BACK_SITE_URL)%'
    back.default_order_status: '%env(BACK_DEFAULT_ORDER_STATUS)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $productImageBackPath: '%env(json:PRODUCT_IMAGE_BACK_PATH)%'
            $productImageFrontPath: '%env(PRODUCT_IMAGE_FRONT_PATH)%'
            $categoryImageBackPath: '%env(json:CATEGORY_IMAGE_BACK_PATH)%'
            $categoryImageFrontPath: '%env(CATEGORY_IMAGE_FRONT_PATH)%'
            $seoProEnabled: '%env(bool:SEO_PRO_ENABLED)%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Service\FrontBackFileSystem\GetBackFileInterface:
        factory:   ['@App\Service\FrontBackFileSystem\FrontBackFileSystemFactory', createGetBackFileInstance]
        arguments: [
            '@Symfony\Component\Filesystem\Filesystem',
            '@Symfony\Contracts\HttpClient\HttpClientInterface',
            '%env(BACK_READER)%'
        ]
    App\Service\FrontBackFileSystem\SaveFrontFileInterface:
        factory:   ['@App\Service\FrontBackFileSystem\FrontBackFileSystemFactory', createSaveFrontFileInstance]
        arguments: [
            '@Symfony\Component\Filesystem\Filesystem',
            '@Symfony\Contracts\HttpClient\HttpClientInterface',
            '%env(FRONT_WRITER)%'
        ]
    App\EventListener\OnConnect:
        tags:
        - { name: doctrine.event_listener, event: postConnect }